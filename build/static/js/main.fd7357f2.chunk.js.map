{"version":3,"sources":["InfoBox.js","Map.js","LineGraph.js","TableA.js","util.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","total","props","Card","onClick","className","CardContent","Typography","color","Map","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","casesType","useState","setData","buildChartData","lastDataPoint","chartData","date","console","log","newDataPoint","x","y","push","useEffect","a","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","TableA","countries","map","country","sortData","sortedData","sort","b","prettyPrintStat","stat","App","setCountries","dropdownCountry","setdropdownCountry","countryInfo","setCountryInfo","tableData","setTableData","setCasesType","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","url","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","recovered","todayDeaths","deaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fd7357f2.chunk.js","sourcesContent":["import React from 'react'\nimport './InfoBox.css'\nimport { Card, CardContent, Typography } from '@material-ui/core'\n\nfunction InfoBox({title,cases,total, ...props}) {\n    return (\n        <Card onClick={props.onClick} className=\"infoBox\">\n            <CardContent>\n                {title}              \n                <Typography className=\"infoBox_title\" color=\"textSecondary\">\n\n                </Typography>\n\n         \n                <h2 className=\"infoBox_cases\">{cases}</h2>\n\n                <Typography className=\"infoBox_total\" color=\"textSecondary\">\n                    {total} Total\n                </Typography>\n\n            </CardContent>\n\n        </Card>\n    )\n}\n\nexport default InfoBox\n","import React from 'react'\n\nfunction Map() {\n    return (\n        <div>\n            <h1>I am a Map</h1>\n        </div>\n    )\n}\n\nexport default Map\n","import React from 'react'\nimport { useState , useEffect} from 'react';\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n    legend: {\n      display: false,\n    },\n    elements: {\n      point: {\n        radius: 0,\n      },\n    },\n    maintainAspectRatio: false,\n    tooltips: {\n      mode: \"index\",\n      intersect: false,\n      callbacks: {\n        label: function (tooltipItem, data) {\n          return numeral(tooltipItem.value).format(\"+0,0\");\n        },\n      },\n    },\n  \n    scales: {\n      xAxes: [\n        {\n          type: \"time\",\n          time: {\n            format: \"MM/DD/YY\",\n            tooltipFormat: \"ll\",\n          },\n        },\n      ],\n      yAxes: [\n        {\n          gridLines: {\n            display: false,\n          },\n          ticks: {\n            callback: function (value, index, values) {\n              return numeral(value).format(\"0a\");\n            },\n          },\n        },\n      ],\n    },\n  };\n\n  const LineGraph = ({ casesType = \"cases\", ...props }) => {\n    const [data, setData] = useState({});\n    const buildChartData = (data) => {\n      const chartData = [];\n      let lastDataPoint;\n      console.log(\"Data in line graph -->>\", data);\n      for (let date in data.cases) {\n        if (lastDataPoint) {\n          const newDataPoint = {\n            x: date,\n            y: data[casesType][date] - lastDataPoint,\n          };\n          chartData.push(newDataPoint);\n        }\n        lastDataPoint = data[casesType][date];\n      }\n      return chartData;\n    };\n// https://disease.sh/v3/covid-19/historical/all?lastdays=120\n\nuseEffect(() => {\n    const fetchData = async () => {\n        await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\n        .then(response => response.json())\n        .then(data => {\n                console.log(data)\n                const chartData = buildChartData(data);\n                setData(chartData)\n        })\n    }\n    fetchData();\n}, [casesType])\n\n\n    return (\n        <div>\n            <h1></h1>\n            {data?.length > 0 && (\n            <Line \n            options={options}\n            data={{\n                datasets: [{\n                    backgroundColor: \"rgba(204,16,52,0.5)\",\n                    borderColor: '#CC1034',\n                    data: data\n                }]\n\n            }} />\n\n            )}\n\n        </div>\n    )\n}\n\nexport default LineGraph\n","import React from 'react'\nimport numeral from \"numeral\";\nimport { Link, TableRow } from '@material-ui/core'\nimport './Table.css';\n\nfunction TableA({ countries }) {\n    return (\n        <div className=\"table\">\n            {countries.map(({ country, cases }) => (\n               <tr>\n                   <td>{country}</td>\n                   <td><strong>{numeral(cases).format(\"0,0\")}</strong></td>\n               </tr>\n            ))}\n        </div>\n    );\n}\n\nexport default TableA\n","import numeral from \"numeral\";\n\nexport const sortData = (data) => {\n    const sortedData = [...data];\n\n    sortedData.sort((a, b) => {\n        if(a.cases > b.cases) {\n            return -1;\n        } else {\n            return 1;\n        }\n    })\n    return sortedData;\n}\n\nexport const prettyPrintStat = (stat) => \n    stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n","import React , {useState , useEffect}  from 'react';\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n  Table\n} from \"@material-ui/core\" \nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport LineGraph from './LineGraph';\nimport TableA from './TableA';\nimport './App.css';\nimport { sortData, prettyPrintStat } from './util';\n\nfunction App() {\n  const [countries,setCountries] = useState([]);\n  const [dropdownCountry,setdropdownCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const[casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then(response => response.json())\n    .then(data => {\n      setCountryInfo(data);\n    })\n  }, [])\n\n  // STATE = thats how we write variables in react\n  // USEEFFECT = Runs a piece of code based on a given condition\n  // https://disease.sh/v3/covid-19/countries\n\n  useEffect(() => {\n\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((response) => response.json())\n      .then((data) => {\n        const countries = data.map((country) => (\n          {\n            name: country.country,\n            value: country.countryInfo.iso2\n          }\n        ));\n        const sortedData = sortData(data);\n        setTableData(sortedData);\n        setCountries(countries);\n      })\n    }\n      getCountriesData();\n  }, [])\n\n  const onCountryChange = async (event) => {\n      const countryCode = event.target.value;\n      setdropdownCountry(countryCode);\n\n      const url = countryCode === 'worldwide' ? 'https://disease.sh/v3/covid-19/all' : \n      `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n      await fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        setdropdownCountry(countryCode);\n        setCountryInfo(data);\n      })\n  }\n  console.log(countryInfo)\n\n  return (\n    <div className=\"app\"> \n\n      <div className=\"app_left\">\n              {/* Header */}\n              {/* Title + Select Input Dropdown */}\n              <div className=\"app_header\">\n    <h1>COVID-19 TRACKER</h1>\n    <FormControl className=\"app_dropdown\">\n      <Select variant=\"outlined\" onChange={onCountryChange} value={dropdownCountry}>\n      <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n        {\n          countries.map((country)=> (\n            <MenuItem value={country.value}>{country.name}</MenuItem>\n          ))\n        }\n\n          {/* <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n          <MenuItem value=\"worldwide\">India</MenuItem>\n          <MenuItem value=\"worldwide\">USA</MenuItem>\n          <MenuItem value=\"worldwide\">Australia</MenuItem> */}\n        </Select>\n    </FormControl>\n    </div>\n     \n                {/* InfoBoxs */}\n                 {/* InfoBoxs */}\n                {/* InfoBoxs */}\n                 {/* InfoBoxs */}\n    <div className=\"app_stats\">\n          <InfoBox onClick={e=> setCasesType('cases')} title=\"Coronavirus Cases\" cases={prettyPrintStat(countryInfo.todayCases)} total={prettyPrintStat(countryInfo.cases)}></InfoBox>\n\n          <InfoBox onClick={e=> setCasesType('recovered')} title=\"Recovered\" cases={prettyPrintStat(countryInfo.todayRecovered)} total={prettyPrintStat(countryInfo.recovered)}></InfoBox>\n\n          <InfoBox onClick={e=> setCasesType('deaths')} title=\"Death\" cases={prettyPrintStat(countryInfo.todayDeaths)} total={prettyPrintStat(countryInfo.deaths)}></InfoBox>\n    </div>\n    {/* Map */}\n    <Map></Map>\n      </div>\n          <div>\n            <Card className=\"app_right\">\n              <CardContent>\n                <h3>Live Cases By Country</h3>\n                <TableA countries = { tableData } />\n                <h3 className=\"app__graphTitle\">Worldwide New {casesType}</h3>\n                {/* Graph */}   \n                <LineGraph className=\"app__graph\" casesType={casesType} />\n\n              </CardContent>\n            </Card>\n\n          </div>\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}