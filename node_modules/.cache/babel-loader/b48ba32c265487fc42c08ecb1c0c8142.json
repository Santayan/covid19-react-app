{"ast":null,"code":"var _jsxFileName = \"/Users/santayanpaul/Desktop/Santayan Personal/PROJECT/covid19-react-app/covid19-react-app/src/LineGraph.js\";\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\nconst options = {\n  legend: {\n    display: false\n  },\n  elements: {\n    point: {\n      radius: 0\n    }\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      }\n    }\n  },\n  scales: {\n    xAxes: [{\n      type: \"time\",\n      time: {\n        format: \"MM/DD/YY\",\n        tooltipFormat: \"ll\"\n      }\n    }],\n    yAxes: [{\n      gridLines: {\n        display: false\n      },\n      ticks: {\n        callback: function (value, index, values) {\n          return numeral(value).format(\"0a\");\n        }\n      }\n    }]\n  }\n};\n\nconst LineGraph = ({\n  casesType = \"cases\",\n  ...props\n}) => {\n  const [data, setData] = useState({});\n\n  const buildChartData = data => {\n    const chartData = [];\n    let lastDataPoint;\n    console.log(\"Data in line graph -->>\", data);\n\n    for (let date in data.cases) {\n      if (lastDataPoint) {\n        const newDataPoint = {\n          x: date,\n          y: data[casesType][date] - lastDataPoint\n        };\n        chartData.push(newDataPoint);\n      }\n\n      lastDataPoint = data[casesType][date];\n    }\n\n    return chartData;\n  }; // https://disease.sh/v3/covid-19/historical/all?lastdays=120\n\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120').then(response => response.json()).then(data => {\n        console.log(data);\n        const chartData = buildChartData(data);\n        setData(chartData);\n      });\n    };\n\n    fetchData();\n  }, [casesType]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }), (data === null || data === void 0 ? void 0 : data.length) > 0 && /*#__PURE__*/React.createElement(Line, {\n    options: options,\n    data: {\n      datasets: [{\n        backgroundColor: \"rgba(204,16,52,0.5)\",\n        borderColor: '#CC1034',\n        data: data\n      }]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default LineGraph;","map":{"version":3,"sources":["/Users/santayanpaul/Desktop/Santayan Personal/PROJECT/covid19-react-app/covid19-react-app/src/LineGraph.js"],"names":["React","useState","useEffect","Line","numeral","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","casesType","props","setData","buildChartData","chartData","lastDataPoint","console","log","date","cases","newDataPoint","x","y","push","fetchData","fetch","then","response","json","length","datasets","backgroundColor","borderColor"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { useState , useEffect} from 'react';\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n    legend: {\n      display: false,\n    },\n    elements: {\n      point: {\n        radius: 0,\n      },\n    },\n    maintainAspectRatio: false,\n    tooltips: {\n      mode: \"index\",\n      intersect: false,\n      callbacks: {\n        label: function (tooltipItem, data) {\n          return numeral(tooltipItem.value).format(\"+0,0\");\n        },\n      },\n    },\n  \n    scales: {\n      xAxes: [\n        {\n          type: \"time\",\n          time: {\n            format: \"MM/DD/YY\",\n            tooltipFormat: \"ll\",\n          },\n        },\n      ],\n      yAxes: [\n        {\n          gridLines: {\n            display: false,\n          },\n          ticks: {\n            callback: function (value, index, values) {\n              return numeral(value).format(\"0a\");\n            },\n          },\n        },\n      ],\n    },\n  };\n\n  const LineGraph = ({ casesType = \"cases\", ...props }) => {\n    const [data, setData] = useState({});\n    const buildChartData = (data) => {\n      const chartData = [];\n      let lastDataPoint;\n      console.log(\"Data in line graph -->>\", data);\n      for (let date in data.cases) {\n        if (lastDataPoint) {\n          const newDataPoint = {\n            x: date,\n            y: data[casesType][date] - lastDataPoint,\n          };\n          chartData.push(newDataPoint);\n        }\n        lastDataPoint = data[casesType][date];\n      }\n      return chartData;\n    };\n// https://disease.sh/v3/covid-19/historical/all?lastdays=120\n\nuseEffect(() => {\n    const fetchData = async () => {\n        await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\n        .then(response => response.json())\n        .then(data => {\n                console.log(data)\n                const chartData = buildChartData(data);\n                setData(chartData)\n        })\n    }\n    fetchData();\n}, [casesType])\n\n\n    return (\n        <div>\n            <h1></h1>\n            {data?.length > 0 && (\n            <Line \n            options={options}\n            data={{\n                datasets: [{\n                    backgroundColor: \"rgba(204,16,52,0.5)\",\n                    borderColor: '#CC1034',\n                    data: data\n                }]\n\n            }} />\n\n            )}\n\n        </div>\n    )\n}\n\nexport default LineGraph\n"]},"metadata":{},"sourceType":"module"}